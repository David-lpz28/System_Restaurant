// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  pending
  in_progress
  completed
}

model Client {
  id           String   @id @default(uuid()) @db.Uuid
  first_name   String
  last_name    String
  phone_number String
  address      String
  orders       Order[]  @relation("ClientOrders")

  @@map("clients")
}

model Restaurant {
  id           String   @id @default(uuid()) @db.Uuid
  name         String
  phone_number String
  address      String
  orders       Order[]  @relation("RestaurantOrders")

  @@map("restaurants")
}

model Order {
  id                  String        @id @default(uuid()) @db.Uuid
  client_id           String        @db.Uuid
  restaurant_id       String        @db.Uuid
  creation_timestamp  DateTime      @default(now())
  completed_timestamp DateTime?
  status              OrderStatus
  client              Client        @relation("ClientOrders", fields: [client_id], references: [id], onDelete: Cascade)
  restaurant          Restaurant    @relation("RestaurantOrders", fields: [restaurant_id], references: [id], onDelete: Cascade)
  items               OrderItem[]

  @@map("orders")
}

model OrderItem {
  id          String   @id @default(uuid()) @db.Uuid
  order_id    String   @db.Uuid
  quantity    Int
  description String
  unit_price  Decimal  @db.Decimal(10, 2)
  order       Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)

  @@map("order_items")
}
